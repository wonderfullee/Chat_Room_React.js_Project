{"version":3,"sources":["UserList.jsx","MessageList.jsx","Display.jsx","Login.jsx","MessageEntry.jsx","Controls.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["UserList","_ref","userText","users","map","user","react_default","a","createElement","key","className","MessageList","messageText","messages","message","source","text","Display","src_UserList","src_MessageList","Login","updatePendingUsername","username","executeLogin","placeholder","onChange","onKeyDown","e","value","onClick","MessageEntry","updatePendingMessage","sendMessage","Controls","isLoggedIn","src_Login","src_MessageEntry","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pendingUsername","pendingMessage","bind","assertThisInitialized","pollMessages","updateMessageList","messageData","setState","fetch","method","then","response","ok","json","Promise","reject","catch","error","console","warn","concat","setTimeout","target","body","JSON","stringify","headers","Headers","content-type","log","sendChatMessage","src_Display","src_Controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b338f64.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst UserList = ({\r\n  users\r\n}) => {\r\n  const userText = users.map(\r\n    user => (<li key={user} className=\"user\">{user}</li>)\r\n  );\r\n  return (\r\n    <ul className=\"active-users\">\r\n      { userText }\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n\r\n","import React from 'react';\r\n\r\nconst MessageList = ({\r\n  messages\r\n}) => {\r\n  const messageText = messages.map(\r\n    message => (\r\n      <li key={message.source + message.text} className=\"message\">\r\n        <span className=\"source\">{message.source}</span>\r\n        <span className=\"text\">{message.text}</span>\r\n      </li>\r\n    )\r\n  );\r\n  return (\r\n    <ul className=\"messages\">\r\n      { messageText }\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default MessageList;\r\n\r\n","import React from 'react';\r\nimport UserList from './UserList';\r\nimport MessageList from './MessageList';\r\n\r\nconst Display = ({\r\n  users,\r\n  messages\r\n}) => {\r\n\r\n  return (\r\n    <div className=\"passive-area\">\r\n      <UserList users={users}/>\r\n      <MessageList messages={messages}/>\r\n      <ul className=\"messages\">\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from 'react';\r\n\r\nconst Login = ({\r\n  updatePendingUsername,\r\n  username,\r\n  executeLogin\r\n}) => {\r\n\r\n  const loginOnEnter = e => {\r\n    if(e.key === 'Enter') {\r\n      executeLogin();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-controls\">\r\n      <input\r\n        className=\"username\"\r\n        placeholder=\"Your user name\"\r\n        onChange={ updatePendingUsername }\r\n        onKeyDown={ loginOnEnter }\r\n        value={username}\r\n      />\r\n      <button onClick={executeLogin}>Login</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nconst MessageEntry = ({\r\n  updatePendingMessage,\r\n  message,\r\n  sendMessage\r\n}) => {\r\n  return (\r\n    <div className=\"message-controls\">\r\n      <input\r\n        onChange={updatePendingMessage}\r\n        onKeyDown={ (e) => {\r\n          if(e.key === 'Enter') {\r\n            sendMessage();\r\n          }\r\n        } }\r\n        className=\"new-message\"\r\n        placeholder=\"Enter Message\"\r\n        value={message}\r\n      />\r\n      <button onClick={sendMessage} className=\"send-message\">Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageEntry;\r\n","import React from 'react';\r\nimport Login from './Login';\r\nimport MessageEntry from './MessageEntry';\r\n\r\nconst Controls = ({\r\n  isLoggedIn,\r\n  updatePendingMessage,\r\n  message,\r\n  sendMessage,\r\n  updatePendingUsername,\r\n  username,\r\n  executeLogin\r\n}) => {\r\n  return (\r\n    <div className=\"active-area\">\r\n      { isLoggedIn || <Login\r\n        updatePendingUsername={updatePendingUsername}\r\n        username={username}\r\n        executeLogin={executeLogin}\r\n      /> }\r\n      { isLoggedIn && <MessageEntry\r\n          sendMessage={sendMessage }\r\n          message={message}\r\n          updatePendingMessage={ updatePendingMessage }\r\n      /> }\r\n      <div>Status Line</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Display from './Display';\r\nimport Controls from './Controls';\r\n\r\nimport { sendChatMessage, getChatMessages } from './services';\r\n\r\nconst POLLING_INTERVAL = 3000;\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: '',\r\n      users: [],\r\n      pendingUsername: '',\r\n      messages: [],\r\n      pendingMessage: ''\r\n    };\r\n    this.updatePendingMessage = this.updatePendingMessage.bind(this);\r\n    this.updatePendingUsername = this.updatePendingUsername.bind(this);\r\n    this.executeLogin = this.executeLogin.bind(this);\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.pollMessages = this.pollMessages.bind(this);\r\n    this.updateMessageList = this.updateMessageList.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.pollMessages();\r\n  }\r\n\r\n  updateMessageList( messageData ) {\r\n    this.setState({\r\n      messages: messageData.messages,\r\n      users: messageData.users\r\n    });\r\n  }\r\n\r\n  pollMessages() {\r\n    getChatMessages()\r\n    .then( this.updateMessageList )\r\n    .catch( error => {\r\n      console.warn(`ERROR: ${error}`);\r\n    });\r\n    setTimeout(this.pollMessages, POLLING_INTERVAL);\r\n  }\r\n\r\n  updatePendingMessage(e) {\r\n    this.setState({\r\n      pendingMessage: e.target.value\r\n    });\r\n  }\r\n\r\n  updatePendingUsername(e) {\r\n    this.setState({\r\n      pendingUsername: e.target.value\r\n    });\r\n  }\r\n\r\n  executeLogin() {\r\n    this.setState({\r\n      user: this.state.pendingUsername,\r\n      pendingUsername: ''\r\n    });\r\n  }\r\n\r\n  sendMessage() {\r\n    sendChatMessage({ source: this.state.user, text: this.state.pendingMessage })\r\n    .then( this.updateMessageList )\r\n    .catch( error => {\r\n      console.warn(`ERROR: ${error}`);\r\n    });\r\n\r\n    this.setState({\r\n      pendingMessage: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const isLoggedIn = !!this.state.user;\r\n    return (\r\n      <div className=\"App\">\r\n        { <Display users={this.state.users} messages={this.state.messages}/>}\r\n        <Controls\r\n          isLoggedIn={!!this.state.user}\r\n          sendMessage={this.sendMessage }\r\n          message={this.state.pendingMessage}\r\n          updatePendingMessage={ this.updatePendingMessage }\r\n          updatePendingUsername={ this.updatePendingUsername }\r\n          username={this.state.pendingUsername}\r\n          executeLogin={this.executeLogin}\r\n        />\r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const getChatMessages = () => {\r\n  return fetch(`/messages`, {\r\n    method: 'GET',\r\n  })\r\n  .then( response => {\r\n    if( response.ok ) {\r\n      return response.json();\r\n    } else {\r\n      return Promise.reject('fetch-error');\r\n    }\r\n  });\r\n};\r\n\r\nexport const sendChatMessage = ({ source, text }) => {\r\n  return fetch(`/messages`, {\r\n    method: 'POST',\r\n    body: JSON.stringify( { source, text } ),\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n    })\r\n  })\r\n  .then( response => {\r\n    if( response.ok ) {\r\n      return response.json();\r\n    } else {\r\n      console.log('error');\r\n      return Promise.reject('fetch-error');\r\n    }\r\n  });\r\n};\r\n\r\n///////\r\nexport const sendUsername = ({ user }) => {\r\n  return fetch(`/session/:username`, {\r\n    method: 'POST',\r\n    body: JSON.stringify( { user } ),\r\n    headers: new Headers({\r\n      'content-type': 'application/json'\r\n    })\r\n  })\r\n  .then( response => {\r\n    if( response.ok ) {\r\n      return response.json();\r\n    } else {\r\n      console.log('user error');\r\n      return Promise.reject('user fetch-error');\r\n    }\r\n  });\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}